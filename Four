
#91.函数参数定义_个数可变的位置形参_个数可变的关键字形参
'''
个数可变的位置参数：
-定义函数时，如果无法确认传递位置实参的个数时，可以使用可变的位置参数
-使用*定义个数可变的位置形参
-结果为一个元组
个数可变的关键字
-
'''


#92.函数的参数总结
'''
def fun(a,b,c):
	print('a=',a)
	print('b=',b)
	print('c=',c)
#函数的调用
fun(10,20,30) #函数调用时的参数传递，称为位置传参
lst=[11,22,33]
fun(*lst) #在函数调用是，将列表中的每个元素都转换为位置实参传入
fun(a=100,b=300,c=400)
dic={'a':111,'b':222,'c':333} #函数的调用，所以是关键字传参
fun(**dic) #函调用时，将字典中的键值对都转换为关键字传参

def fun(a,b=10): #b时在函数定义处，所以b时形参，而且进行了赋值，所以b称为默认值传参
	print('a=', a)
	print('b=', b)

def fun2(*args): #个数可变的位置形参
	print(args)
	
def fun3(**args2): #个数可变的关键字传参
	print(args2)
	
fun2(10,20,30,40)
fun3(a=11,b=22,c=33,d=44,e=55)

def fun4(a,b,c,d):
	print('a=',a)
	print('b=',b)
	print('c=',c)
	print('d=',d)
fun4(10,20,30,40)   #位置实参传递
fun4(a=10,b=20,c=30,d=40) #关键字实参传递
fun4(10,20,c=30,d=30)  #前零个参数，位置实参传递，而b,c时关键字传参

#需求：c,d只能采用关键字实参传递
'''

#93.变量的作用域
'''
1.程序代码能访问该变量的区域
2.根据变量的有效范围可分为
（1）局部变量：在函数定义并使用的变量，只在函数内部有效，可使用global声明，就会成为全局变量
（2）全局变量：函数体外定义的变量，可作用与函数内外

def fun(a,b):
	c=a+b #c就称为局部变量，因为C时函数体内部定义的变量，a,b为函数形参，作用范围也是函数内部
	print(c)
#print(c) #因为a,c超出了起作用的范围
#print(a)


name = 'jack' #name作用范围为函数内部和外部，称为全局变量
print(name)
def fun1():
	print(name)
fun1()

def fun2():
	global age #函数内部定义的变量，局部变量，可使用global声明，这个变量就变成了全局变量
	age =20
	print(age)
fun2()
#print(age)
'''

#94.递归函数
'''
什么是递归函数：如果在一个函数的函数体内部调用了该函数本身，就称之为递归函数
组成部分：递归调用与递 归终止条件
调用过程：每递归调用一次，都会在栈内分配一个栈帧
		 每执行一次，都会释放相应的空间
优点：思路和代码简单
缺点：占用内存多，效率地下
		

#利用递归计算阶乘
6
def fac(n):
	if n==1:
		return 1
	else:
		return n*fac(n-1)
print(fac(6))'''

'''
96.斐波那契数列

def fib(n):
	if n== 1:
		return 1
	elif n==2:
		return 2
	else:
		return fib(n-1)+fib(n-2)
#斐波那契数列第6位上的数字
print(fib(6))

#输出这个数列的前6位上的数字
for i in range(1,7):
	print(fib(i))
	
age = input('请输入你的年龄：')
print(type(age))
if int(age)>=18:
	print('成年人')
else:
	print('未成年人')'''

#BUG
# lst=[1,2,34,5] #列表的索引是从0开始的
# print(lst[3])

# ls=[]
# #ls.append('a','b','b')
# ls.append('a')
# ls.append('b')

# print(ls)

#101.python异常处理机制
#python提供了异常处理机制，可以在异常出现的时候，即时捕获，让程序继续执行
try:
	n=int(input('请输入第一个整数'))
	m=int(input('请输入第二个整数'))
	result = n/m
	print('结果位：',result)
except ZeroDivisionError:
	print('对不起，除数不允许为0')
print('程序结束')